# -*- coding: utf-8 -*-
"""mobileNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uTabi4-pCIP0Rf4XhjnfN5A0Nk4pqaSb
"""





import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.layers import *
from keras.models import *
from keras_preprocessing import image
from os import listdir
from os.path import isfile, join
import numpy as np
import pandas as pd
import os
from keras.applications.mobilenet import MobileNet
from sklearn.model_selection import KFold, StratifiedKFold
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from imblearn.over_sampling import SMOTE
from imblearn.over_sampling import BorderlineSMOTE
from imblearn.over_sampling import ADASYN
from imblearn.over_sampling import KMeansSMOTE
import smote_variants as sv
from sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score
from PIL import Image
from matplotlib import pyplot as plt

train_data = pd.read_csv('train.csv',dtype=str)
validation_data=pd.read_csv('test.csv',dtype=str)
Y = train_data[['label']]
X_train=train_data[['train_images']]
train_labels=list(train_data['label'])
kf = KFold(n_splits = 5)
Y_val=validation_data['label']

idg = ImageDataGenerator(width_shift_range=0.1,
                         height_shift_range=0.1,
                         zoom_range=0.3,
                         fill_mode='nearest',
                         horizontal_flip = True,
                         rescale=1./255)

VALIDATION_ACCURACY = []
accuracy_mobile_smote=[]
f1_score_mobile_smote=[]
sensitivity_mobile_smote=[]
precision_mobile_smote=[]
precision=[]
VALIDAITON_LOSS = []
f1_score=[]
recall=[]
image_dir_train='/content/CovidDataset/Train'
image_dir_val='/content/CovidDataset/Val'
save_dir = '/saved_models/'
fold_var = 1

for train_index, val_index in kf.split(np.zeros(224),Y):
    
    train_data_generator = idg.flow_from_dataframe(train_data, directory = image_dir_train,
                    x_col = "train_images", y_col = "label", target_size=(224, 224),
                    class_mode = "binary", shuffle = True)
    valid_data_generator  = idg.flow_from_dataframe(validation_data, directory = image_dir_val,
                x_col = "val_images", y_col = "label", target_size=(224, 224),
                class_mode = "binary", shuffle = True)
    sm = SMOTE(random_state=2)
    x_train,y_train= sm.fit_resample(train_data_generator,Y)

    
    # CREATE NEW MODEL
    model=MobileNet()
    model.compile(loss='mse', optimizer='adam')
    history = model.fit(x_train,y_train,
            epochs=100,           
            validation_data=valid_data_generator)
    

    VALIDATION_ACCURACY.append(results['accuracy'])
    VALIDATION_LOSS.append(results['loss'])
    accuracy_mobile_smote.append(results['accuracy'])
    tf.keras.backend.clear_session()
    test_y=[]
    train_y=[]
    for i in os.listdir("CovidDataset/Val/Normal/"):
      img=image.load_img("CovidDataset/Val/Normal/"+i)
      img=img.resize((224,224), Image.ANTIALIAS)
      img=image.img_to_array(img)
      img=np.expand_dims(img, axis=0)
      p=model.predict_classes(img)
      test_y.append(p[0,0])
      train_y.append(1)
    for i in os.listdir("CovidDataset/Val/Covid/"):
      img=image.load_img("CovidDataset/Val/Covid/"+i)
      img=img.resize((224,224), Image.ANTIALIAS)
      img=image.img_to_array(img)
      img=np.expand_dims(img, axis=0)
      p=model.predict_classes(img)
      test_y.append(p[0,0])
      train_y.append(0)
    train_y=np.array(train_y)
    test_y=np.array(test_y)
    f1_score=f1_score(train_y,test_y)
    f1_score_mobile_smote.append(f1_score)
    recall=recall_score(train_y,test_y)
    sensitivity_mobile_smote.append(recall)
    precision=precision_score(train_y,test_y)
    precision_mobile_smote.append(precision)
    fold_var += 1

acc_avg_mobile_smote=np.mean(accuracy_mobile_smote)
acc_std_mobile_smote=np.std(accuracy_mobile_smote)
prec_avg_mobile_smote=np.mean(precision_mobile_smote)
prec_std_mobile_smote=np.std(precision_mobile_smote)
sens_avg_mobile_smote=np.mean(sensitivity_mobile_smote)
sens_std_mobile_smote=np.std(sensitivity_mobile_smote)
f1_avg_mobile_smote=np.mean(f1_score_mobile_smote)
f1_acc_mobile_smote=np.std(f1_score_mobile_smote)



VALIDATION_ACCURACY = []
accuracy_mobile_normal=[]
f1_score_mobile_normal=[]
sensitivity_mobile_normal=[]
precision_mobile_normal=[]
precision=[]
VALIDAITON_LOSS = []
f1_score=[]
recall=[]
image_dir_train='/content/CovidDataset/Train'
image_dir_val='/content/CovidDataset/Val'
save_dir = '/saved_models/'
fold_var = 1

for train_index, val_index in kf.split(np.zeros(224),Y):
    
    train_data_generator = idg.flow_from_dataframe(train_data, directory = image_dir_train,
                    x_col = "train_images", y_col = "label", target_size=(224, 224),
                    class_mode = "binary", shuffle = True)
    valid_data_generator  = idg.flow_from_dataframe(validation_data, directory = image_dir_val,
                x_col = "val_images", y_col = "label", target_size=(224, 224),
                class_mode = "binary", shuffle = True)

    # CREATE NEW MODEL

    model=MobileNet()
    model.compile(loss='mse', optimizer='adam')
    history = model.fit(train_data_generator,
            epochs=100,           
            validation_data=valid_data_generator)
 
    VALIDATION_ACCURACY.append(results['accuracy'])
    VALIDATION_LOSS.append(results['loss'])
    accuracy_mobile_normal.append(results['accuracy'])
    tf.keras.backend.clear_session()
    test_y=[]
    train_y=[]
    for i in os.listdir("CovidDataset/Val/Normal/"):
      img=image.load_img("CovidDataset/Val/Normal/"+i)
      img=img.resize((224,224), Image.ANTIALIAS)
      img=image.img_to_array(img)
      img=np.expand_dims(img, axis=0)
      p=model.predict_classes(img)
      test_y.append(p[0,0])
      train_y.append(1)
    for i in os.listdir("CovidDataset/Val/Covid/"):
      img=image.load_img("CovidDataset/Val/Covid/"+i)
      img=img.resize((224,224), Image.ANTIALIAS)
      img=image.img_to_array(img)
      img=np.expand_dims(img, axis=0)
      p=model.predict_classes(img)
      test_y.append(p[0,0])
      train_y.append(0)
    train_y=np.array(train_y)
    test_y=np.array(test_y)
    f1_score=f1_score(train_y,test_y)
    f1_score_mobile_normal.append(f1_score)
    recall=recall_score(train_y,test_y)
    sensitivity_mobile_normal.append(recall)
    precision=precision_score(train_y,test_y)
    precision_mobile_normal.append(precision)
    fold_var += 1

acc_avg_mobile_normal=np.mean(accuracy_mobile_normal)
acc_std_mobile_normal=np.std(accuracy_mobile_normal)
prec_avg_mobile_normal=np.mean(precision_mobile_normal)
prec_std_mobile_normal=np.std(precision_mobile_normal)
sens_avg_mobile_normal=np.mean(sensitivity_mobile_normal)
sens_std_mobile_normal=np.std(sensitivity_mobile_normal)
f1_avg_mobile_normal=np.mean(f1_score_mobile_normal)
f1_acc_mobile_normal=np.std(f1_score_mobile_normal)



































